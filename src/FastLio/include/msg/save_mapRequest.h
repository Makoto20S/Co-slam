// Generated by gencpp from file na_mapping/save_mapRequest.msg
// DO NOT EDIT!


#ifndef NA_MAPPING_MESSAGE_SAVE_MAPREQUEST_H
#define NA_MAPPING_MESSAGE_SAVE_MAPREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace na_mapping
{
template <class ContainerAllocator>
struct save_mapRequest_
{
  typedef save_mapRequest_<ContainerAllocator> Type;

  save_mapRequest_()
    : resolution(0.0)
    , destination()  {
    }
  save_mapRequest_(const ContainerAllocator& _alloc)
    : resolution(0.0)
    , destination(_alloc)  {
  (void)_alloc;
    }



   typedef float _resolution_type;
  _resolution_type resolution;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _destination_type;
  _destination_type destination;





  typedef boost::shared_ptr< ::na_mapping::save_mapRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::na_mapping::save_mapRequest_<ContainerAllocator> const> ConstPtr;

}; // struct save_mapRequest_

typedef ::na_mapping::save_mapRequest_<std::allocator<void> > save_mapRequest;

typedef boost::shared_ptr< ::na_mapping::save_mapRequest > save_mapRequestPtr;
typedef boost::shared_ptr< ::na_mapping::save_mapRequest const> save_mapRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::na_mapping::save_mapRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::na_mapping::save_mapRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::na_mapping::save_mapRequest_<ContainerAllocator1> & lhs, const ::na_mapping::save_mapRequest_<ContainerAllocator2> & rhs)
{
  return lhs.resolution == rhs.resolution &&
    lhs.destination == rhs.destination;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::na_mapping::save_mapRequest_<ContainerAllocator1> & lhs, const ::na_mapping::save_mapRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace na_mapping

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::na_mapping::save_mapRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::na_mapping::save_mapRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::na_mapping::save_mapRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::na_mapping::save_mapRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::na_mapping::save_mapRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::na_mapping::save_mapRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::na_mapping::save_mapRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8129166042856bf2b765173d013957f2";
  }

  static const char* value(const ::na_mapping::save_mapRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8129166042856bf2ULL;
  static const uint64_t static_value2 = 0xb765173d013957f2ULL;
};

template<class ContainerAllocator>
struct DataType< ::na_mapping::save_mapRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "na_mapping/save_mapRequest";
  }

  static const char* value(const ::na_mapping::save_mapRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::na_mapping::save_mapRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 resolution\n"
"string destination\n"
;
  }

  static const char* value(const ::na_mapping::save_mapRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::na_mapping::save_mapRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.resolution);
      stream.next(m.destination);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct save_mapRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::na_mapping::save_mapRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::na_mapping::save_mapRequest_<ContainerAllocator>& v)
  {
    s << indent << "resolution: ";
    Printer<float>::stream(s, indent + "  ", v.resolution);
    s << indent << "destination: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.destination);
  }
};

} // namespace message_operations
} // namespace ros

#endif // NA_MAPPING_MESSAGE_SAVE_MAPREQUEST_H
