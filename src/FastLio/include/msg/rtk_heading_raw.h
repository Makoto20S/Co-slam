// Generated by gencpp from file na_mapping/rtk_heading_raw.msg
// DO NOT EDIT!


#ifndef NA_MAPPING_MESSAGE_RTK_HEADING_RAW_H
#define NA_MAPPING_MESSAGE_RTK_HEADING_RAW_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace na_mapping
{
template <class ContainerAllocator>
struct rtk_heading_raw_
{
  typedef rtk_heading_raw_<ContainerAllocator> Type;

  rtk_heading_raw_()
    : header()
    , week(0)
    , ms(0)
    , sol_stat(0)
    , pos_type(0)
    , heading(0.0)
    , pitch(0.0)
    , heading_std_dev(0.0)
    , pitch_std_dev(0.0)  {
    }
  rtk_heading_raw_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , week(0)
    , ms(0)
    , sol_stat(0)
    , pos_type(0)
    , heading(0.0)
    , pitch(0.0)
    , heading_std_dev(0.0)
    , pitch_std_dev(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint16_t _week_type;
  _week_type week;

   typedef uint32_t _ms_type;
  _ms_type ms;

   typedef uint32_t _sol_stat_type;
  _sol_stat_type sol_stat;

   typedef uint32_t _pos_type_type;
  _pos_type_type pos_type;

   typedef double _heading_type;
  _heading_type heading;

   typedef double _pitch_type;
  _pitch_type pitch;

   typedef float _heading_std_dev_type;
  _heading_std_dev_type heading_std_dev;

   typedef float _pitch_std_dev_type;
  _pitch_std_dev_type pitch_std_dev;





  typedef boost::shared_ptr< ::na_mapping::rtk_heading_raw_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::na_mapping::rtk_heading_raw_<ContainerAllocator> const> ConstPtr;

}; // struct rtk_heading_raw_

typedef ::na_mapping::rtk_heading_raw_<std::allocator<void> > rtk_heading_raw;

typedef boost::shared_ptr< ::na_mapping::rtk_heading_raw > rtk_heading_rawPtr;
typedef boost::shared_ptr< ::na_mapping::rtk_heading_raw const> rtk_heading_rawConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::na_mapping::rtk_heading_raw_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::na_mapping::rtk_heading_raw_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::na_mapping::rtk_heading_raw_<ContainerAllocator1> & lhs, const ::na_mapping::rtk_heading_raw_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.week == rhs.week &&
    lhs.ms == rhs.ms &&
    lhs.sol_stat == rhs.sol_stat &&
    lhs.pos_type == rhs.pos_type &&
    lhs.heading == rhs.heading &&
    lhs.pitch == rhs.pitch &&
    lhs.heading_std_dev == rhs.heading_std_dev &&
    lhs.pitch_std_dev == rhs.pitch_std_dev;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::na_mapping::rtk_heading_raw_<ContainerAllocator1> & lhs, const ::na_mapping::rtk_heading_raw_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace na_mapping

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::na_mapping::rtk_heading_raw_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::na_mapping::rtk_heading_raw_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::na_mapping::rtk_heading_raw_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::na_mapping::rtk_heading_raw_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::na_mapping::rtk_heading_raw_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::na_mapping::rtk_heading_raw_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::na_mapping::rtk_heading_raw_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bb7407207602cc2a6d5f6b55a10e01a7";
  }

  static const char* value(const ::na_mapping::rtk_heading_raw_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbb7407207602cc2aULL;
  static const uint64_t static_value2 = 0x6d5f6b55a10e01a7ULL;
};

template<class ContainerAllocator>
struct DataType< ::na_mapping::rtk_heading_raw_<ContainerAllocator> >
{
  static const char* value()
  {
    return "na_mapping/rtk_heading_raw";
  }

  static const char* value(const ::na_mapping::rtk_heading_raw_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::na_mapping::rtk_heading_raw_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ros 时间\n"
"Header header\n"
"\n"
"# GPS 周\n"
"uint16 week\n"
"# 从 GPS 周起算的毫秒\n"
"uint32 ms\n"
"\n"
"# 解状态\n"
"# 0 SOL_COMPUTED 解算成功\n"
"# 1 INSUFFICIENT_OBS 观测量不足\n"
"# 6 COLD_START 冷启动中\n"
"# 19 INVALID_FIX Fix position 输入的坐标误差超限， 将停止差分数据的发送\n"
"uint32 sol_stat\n"
"\n"
"# 定位类型\n"
"# 0 NONE 未解算\n"
"# 1 FIXEDPOS 通过指令 FIX POSITION 进行位置固定\n"
"# 8 DOPPLER_VELOCITY 利用实时多普勒计算速度\n"
"# 9 SINGLE_SMOOTH 单点平滑定位\n"
"# 16 SINGLE 单点定位\n"
"# 17 PSRDIFF 伪距差分定位\n"
"# 18 SBAS 加入 SBAS 改正的解\n"
"# 34 NARROW_FLOAT 浮点解\n"
"# 35 FIX_DERIVATION 推导解\n"
"# 49 WIDE_INT 宽巷解\n"
"# 50 NARROW_INT 固定解\n"
"# 51 SUPER WIDE_LANE 超宽巷解\n"
"# 64 OMNISTAR_HP OmniSTAR HP 定位解\n"
"# 65 OMNISTAR_XP OmniSTAR XP 定位解\n"
"# 68 PPP_CONVERGING PPP 收敛解\n"
"# 69 PPP PPP 浮点解\n"
"# 70 OPERATIONAL 根据用户定义的标准差阈值设置输出， 在米级内输出\n"
"# 71 WARNING 解算精度超出用户设定的阈值， 但在预警范围内\n"
"# 72 OUT_OF_BOUNDS 超出用户定义的标准差阈值\n"
"uint32 pos_type\n"
"\n"
"# 航向角（0-360.0°）\n"
"float64 heading\n"
"# 俯仰角（+-90°）\n"
"float64 pitch\n"
"\n"
"# 航向角标准差（°）\n"
"float32 heading_std_dev\n"
"# 俯仰角标准差（°）\n"
"float32 pitch_std_dev\n"
"\n"
"\n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::na_mapping::rtk_heading_raw_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::na_mapping::rtk_heading_raw_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.week);
      stream.next(m.ms);
      stream.next(m.sol_stat);
      stream.next(m.pos_type);
      stream.next(m.heading);
      stream.next(m.pitch);
      stream.next(m.heading_std_dev);
      stream.next(m.pitch_std_dev);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct rtk_heading_raw_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::na_mapping::rtk_heading_raw_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::na_mapping::rtk_heading_raw_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "week: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.week);
    s << indent << "ms: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.ms);
    s << indent << "sol_stat: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.sol_stat);
    s << indent << "pos_type: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.pos_type);
    s << indent << "heading: ";
    Printer<double>::stream(s, indent + "  ", v.heading);
    s << indent << "pitch: ";
    Printer<double>::stream(s, indent + "  ", v.pitch);
    s << indent << "heading_std_dev: ";
    Printer<float>::stream(s, indent + "  ", v.heading_std_dev);
    s << indent << "pitch_std_dev: ";
    Printer<float>::stream(s, indent + "  ", v.pitch_std_dev);
  }
};

} // namespace message_operations
} // namespace ros

#endif // NA_MAPPING_MESSAGE_RTK_HEADING_RAW_H
